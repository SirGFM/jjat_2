#!/bin/bash
#===============================================================================
# Shell script for deploying builds
#-------------------------------------------------------------------------------
# Since I name my chroots after Mega Man boss masters, this one is named after
# Mega Man's dog, Rush.
#===============================================================================

#-------------------------------------------------------------------------------
# Set default values for variables
#-------------------------------------------------------------------------------
VERBOSE=${VERBOSE:-true}
BASE_DIR=${BASE_DIR:-/run/ramdisk}
CHROOT_BASE_DIR=${CHROOT_BASE_DIR:-/mnt/linools/env}
CHROOT_WORK_DIR=${CHROOT_WORK_DIR:-/mnt/ramdisk/}
BINARY_NAME=${BINARY_NAME:-game}
REQ_RAM=${REQ_RAM:-128m}
CHANNEL=${CHANNEL:-GFM/jjat-2}

RUSH_DIR=`dirname ${0}`

#-------------------------------------------------------------------------------
# Print the supplied message if \${VERBOSE} is true.
#-------------------------------------------------------------------------------
function my_print() {
    if ${VERBOSE}; then
        echo $*
    fi
}

#-------------------------------------------------------------------------------
# Check if something succeeded. On exit, script execution is halted.
#
# Should be called as:
#   check_error $? reason
#-------------------------------------------------------------------------------
function check_error() {
    if [ $1 -ne 0 ]; then
        echo "'$2' failed with exit code $1"
        exit $1
    fi
}

function setup() {
    # Create the temporary environment
    my_print "Creating ramdisk work directory (on ${BASE_DIR})..."
    sudo mkdir -p ${BASE_DIR}
    sudo chown gfm:gfm ${BASE_DIR}
    sudo mount -t tmpfs -o size=${REQ_RAM} tmpfs ${BASE_DIR}
    check_error $? "Mount ramdisk"
    # Download the latest HEAD to the temp-env
    git clone --depth 1 ${REPO} ${BASE_DIR}
}

function cleanup() {
    # Since it's a ramdisk, simply unmount is enough to clean everything up
    sudo umount ${BASE_DIR}
}

function build() {
    # Ensure that setup was run
    if [ ! -d ${BASE_DIR} ] || [ "`ls ${BASE_DIR}`" == "" ]; then
        echo "${BASE_DIR} non-extant or empty! Make sure to run 'setup' before 'build'"
        usage
        exit 1
    fi
    # Ensure the output directory exists
    mkdir -p deploy/${ARCH}/
    # Enable access to the workdir in the chroot
    if [ "$(mount | grep ${CHROOT%-*})" == "" ]; then
        my_print "Binding work directory into chroot (${BASE_DIR} -> ${CHROOT_BASE_DIR}/${CHROOT}${CHROOT_WORK_DIR}"
        if [ ! -d ${CHROOT_BASE_DIR}/${CHROOT}${CHROOT_WORK_DIR} ]; then
            sudo mkdir ${CHROOT_BASE_DIR}/${CHROOT}${CHROOT_WORK_DIR}
        fi
        sudo mount --bind ${BASE_DIR} ${CHROOT_BASE_DIR}/${CHROOT}${CHROOT_WORK_DIR}
        check_error $? "Bind work_dir into chroot"
    fi
    # Actually build it
    my_print "Cleaning build (on chroot: ${CHROOT_WORK_DIR})..."
    ${CHROOT_BASE_DIR}/run ${CHROOT} make clean -C ${CHROOT_WORK_DIR}  RELEASE=yes
    check_error $? "Clean chroot work dir"
    my_print "Building (on chroot: ${CHROOT_WORK_DIR})..."
    ${CHROOT_BASE_DIR}/run ${CHROOT} make -j 7 -C ${CHROOT_WORK_DIR} RELEASE=yes
    check_error $? "Deploy for chroot"
    # Done with it, unbind the workdir
    sudo umount ${CHROOT_BASE_DIR}/${CHROOT}${CHROOT_WORK_DIR}

    # Copy it to the output dir
    my_print "Copying everything to the destination"
    find ${BASE_DIR}/bin -name ${BINARY_NAME} -exec cp {} deploy/${ARCH}/ \;
    check_error $? "Copy built bin into destination"
    # Update the assets (TODO: assets should be within \${BASE_DIR})
    find assets -exec ${RUSH_DIR}/update_asset {} deploy/${ARCH} \;
    # Check if a win 32/64 build and add the extension
    FILE_TYPE=`file deploy/${ARCH}/${BINARY_NAME}`
    if [ "`echo ${FILE_TYPE} | grep -o PE32+`" == "PE32+" ] || [ "`echo ${FILE_TYPE} | grep -o PE32`" == "PE32" ]; then
        mv deploy/${ARCH}/${BINARY_NAME} deploy/${ARCH}/${BINARY_NAME}.exe
    fi
    # Update the files
    my_print "Updating the manual..."
    rm -rf deploy/${ARCH}/manual/
    cp -r ${BASE_DIR}/manual/ deploy/${ARCH}/

    # Set up the manifest and launch script
    rm -f deploy/${ARCH}/.itch.toml
    if [ "`echo ${FILE_TYPE} | grep -o PE32+`" == "PE32+" ] || [ "`echo ${FILE_TYPE} | grep -o PE32`" == "PE32" ]; then
        sed s/BINARY/game.exe/g ${BASE_DIR}/misc/deploy/itch.manifest > deploy/${ARCH}/.itch.toml
        sed -i s/BROWSER/manual.bat/g deploy/${ARCH}/.itch.toml
        cp ${BASE_DIR}/misc/deploy/manual.bat deploy/${ARCH}/
        cp ${BASE_DIR}/misc/deploy/Single_Player_Mode.bat deploy/${ARCH}
        cp ${BASE_DIR}/misc/deploy/Synchronous_Single_Player_Mode.bat deploy/${ARCH}
        cp ${BASE_DIR}/misc/deploy/Two_Players_Mode.bat deploy/${ARCH}
    else
        sed s/BINARY/launch.sh/g ${BASE_DIR}/misc/deploy/itch.manifest > deploy/${ARCH}/.itch.toml
        sed -i s/BROWSER/manual.sh/g deploy/${ARCH}/.itch.toml
        cp ${BASE_DIR}/misc/deploy/launch.sh deploy/${ARCH}/
        cp ${BASE_DIR}/misc/deploy/manual.sh deploy/${ARCH}/
        chmod 755 deploy/${ARCH}/launch.sh deploy/${ARCH}/game deploy/${ARCH}/manual.sh
    fi
}

function deploy() {
    my_print "Pushing the deploy..."
    butler push --userversion-file=${VERSION_FILE} deploy/${ARCH}/ "${CHANNEL}:${ARCH}"
}

#-------------------------------------------------------------------------------
# Check if the requested argument was supplied.
#
# The argument is verified by its name. E.g.:
#   check_arg ARCH
#-------------------------------------------------------------------------------
function check_arg() {
    val=$(eval echo -n "\$$1")
    if [ -z "${val}" ]; then
        echo "'${1}' is required for command '${CMD}' but wasn't defined!"
        usage
        exit 1
    fi
}

#-------------------------------------------------------------------------------
# Print the script's usage.
#-------------------------------------------------------------------------------
function usage() {
    echo "Usage: ${0} setup|build|deploy|cleanup"
    echo "  ${0} is a all-in-one script that helps building and "
    echo "  deploying a game (well, given a few constraints)."
    echo ""
    echo "  The script make extensive use of environment variable, which shall "
    echo "  be documented here as they would be used (e.g. \${HOME})."
    echo ""
    echo "  Each command has a set of options/arguments, as specified bellow:"
    echo ""
    echo "  ${0} setup --url REPO"
    echo "      Sets up the environment for deploying a game. It creates a "
    echo "      ramdisk of \${REQ_RAM} bytes (defaults to 128 MB, specified as "
    echo "      128m), where it clones only the master of REPO."
    echo "      The ramdisk is created on \${BASE_DIR} (defaults to /run/ramdisk)"
    echo ""
    echo "      --url -- URL of the project's repository. Only the latest" \
         "master will be"
    echo "               downloaded, so make sure to push all modifications!"
    echo ""
    echo "  ${0} cleanup"
    echo "      Cleans up the environment created on \${BASE_DIR}."
    echo ""
    echo "  ${0} build --chroot CHROOT --arch ARCH"
    echo "      Builds the project for a given "pseudo-architecture" (for" \
         "example, win32"
    echo "      is a valid architecture for this command). It uses the supplied" \
         "chroot to"
    echo "      build it, and copies the generated binary to" \
         "./deploy/\${ARCH} (i.e., "
    echo "      the argument)."
    echo "      "
    echo ""
    echo "      --chroot -- Name of the chroot environment to be used"
    echo "      --arch -- Name of the build target; Compiled binary shall be" \
         "found on"
    echo "      ./deploy/\${ARCH}"
    echo ""
    echo "  ${0} deploy --version-file VERSION_FILE --arch ARCH"
    echo "      Deploys whatever is currently on ./deploy/\${ARCH}/ (i.e.," \
         "the argument)"
    echo "      to the remote server, using itch's butler. The directory" \
         "will be pushed to"
    echo "      \${CHANNEL}:\${ARCH} (e.g., GFM/jjat-2:linux64)."

    echo ""
    echo "      --version-file -- File that store the version to be pushed"
    echo ""
    echo "      --arch -- Name of the target to be pushed; The entire" \
         "directory"
    echo "      ./build/\${ARCH} shall be uploaded."
    echo ""

    exit 0
}

# Retrieve the command
if [ $# -lt 1 ]; then
    echo "Missing command!"
    usage
    exit 0
fi
CMD=${1}
shift

# Parse all args
while [ $# -gt 0 ]; do
    case ${1} in
    "--chroot" | "-c")
        CHROOT=${2}
        shift
    ;;
    "--arch" | "-a")
        ARCH=${2}
        shift
    ;;
    "--version-file" | "-v")
        VERSION_FILE=${2}
        shift
    ;;
    "--url" | "-u")
        REPO=${2}
        shift
    ;;
    "--help" | "-h")
        usage
        exit 0
    ;;
    *)
        echo "Unknown argument '${1}'"
        usage
        exit 0
    ;;
    esac

    shift
done

# Corner case: no command given, but asked for help
if [ "${CMD}" == "--help" ] || [ "${CMD}" == "-h" ]; then
    usage
    exit 0
fi

# Check that all required arguments were supplied and run the command
case ${CMD} in
"setup")
    check_arg REPO

    setup
;;
"build")
    check_arg CHROOT
    check_arg ARCH

    build
;;
"deploy")
    check_arg VERSION_FILE
    check_arg ARCH

    deploy
;;
"cleanup")
    cleanup
;;
*)
    echo "Invalid command '${CMD}'"
    usage
    exit 1
;;
esac

exit 0

