#!/bin/bash
#===============================================================================
# Shell script for deploying builds
#-------------------------------------------------------------------------------
# Since I name my chroots after Mega Man boss masters, this one is named after
# Mega Man's dog, Rush.
#===============================================================================

VERBOSE=${VERBOSE:-true}

function my_print() {
    if ${VERBOSE}; then
        echo $*
    fi
}

function check_error() {
    if [ $1 -ne 0 ]; then
        echo "'$2' failed with exit code $1"
        exit $1
    fi
}

function check_arg() {
    val=$(eval echo -n "\$$1")
    if [ -z "${val}" ]; then
        echo "'${1}' is required for command '${CMD}' but wasn't defined!"
        usage
        exit 1
    fi
}

function usage() {
    echo "Usage: ${0} setup|build|deploy|cleanup"
    echo "  ${0} is a all-in-one script that helps building and "
    echo "  deploying a game (well, given a few constraints)."
    echo ""
    echo "  The script make extensive use of environment variable, which shall "
    echo "  be documented here as they would be used (e.g. \${HOME})."
    echo ""
    echo "  Each command has a set of options/arguments, as specified bellow:"
    echo ""
    echo "  ${0} setup --url REPO"
    echo "      Sets up the environment for deploying a game. It creates a "
    echo "      ramdisk of \${REQ_RAM} bytes (defaults to 128 MB, specified as "
    echo "      128m), where it clones only the master of REPO."
    echo "      The ramdisk is created on \${BASE_DIR} (defaults to /run/ramdisk)"
    echo ""
    echo "      --url -- URL of the project's repository. Only the latest" \
         "master will be"
    echo "               downloaded, so make sure to push all modifications!"
    echo ""
    echo "  ${0} cleanup"
    echo "      Cleans up the environment created on \${BASE_DIR}."
    echo ""
    echo "  ${0} build --chroot CHROOT --arch ARCH"
    echo "      Builds the project for a given "pseudo-architecture" (for" \
         "example, win32"
    echo "      is a valid architecture for this command). It uses the supplied" \
         "chroot to"
    echo "      build it, and copies the generated binary to" \
         "./deploy/\${ARCH} (i.e., "
    echo "      the argument)."
    echo "      "
    echo ""
    echo "      --chroot -- Name of the chroot environment to be used"
    echo "      --arch -- Name of the build target; Compiled binary shall be" \
         "found on"
    echo "      ./deploy/\${ARCH}"
    echo ""
    echo "  ${0} deploy --version-file VERSION_FILE --arch ARCH"
    echo "      Deploys whatever is currently on ./deploy/\${ARCH}/ (i.e.," \
         "the argument)"
    echo "      to the remote server, using itch's butler. The directory" \
         "will be pushed to"
    echo "      \${CHANNEL}:\${ARCH} (e.g., GFM/jjat-2:linux64)."

    echo ""
    echo "      --version-file -- File that store the version to be pushed"
    echo ""
    echo "      --arch -- Name of the target to be pushed; The entire" \
         "directory"
    echo "      ./build/\${ARCH} shall be uploaded."
    echo ""

    exit 0
}

# Retrieve the command
if [ $# -lt 1 ]; then
    echo "Missing command!"
    usage
    exit 0
fi
CMD=${1}
shift

# Parse all args
while [ $# -gt 0 ]; do
    case ${1} in
    "--chroot" | "-c")
        CHROOT=${2}
        shift
    ;;
    "--arch" | "-a")
        ARCH=${2}
        shift
    ;;
    "--version-file" | "-v")
        VERSION_FILE=${2}
        shift
    ;;
    "--help" | "-h")
        usage
        exit 0
    esac

    shift
done

# Corner case: no command given, but asked for help
if [ "${CMD}" == "--help" ] || [ "${CMD}" == "-h" ]; then
    usage
    exit 0
fi

# Check that all required arguments were supplied
case ${CMD} in
"setup")
    check_arg REPO
;;
"build")
    check_arg CHROOT
    check_arg ARCH
;;
"deploy")
    check_arg VERSION_FILE
    check_arg ARCH
;;
"cleanup")
;;
*)
    echo "Invalid command '${CMD}'"
    usage
    exit 1
;;
esac

exit 0

if [ $# -ne 2 ]; then
    echo "Usage: ${0} chroot_name arch_name"
    echo "  chroot_name -- Name of the chroot environment to be used"
    echo "  arch_name -- Name of the build target; Compiled binary shall be found on" \
         "build/\${arch_name}"
    exit 0
fi

CHROOT=${1}
ARCH=${2}
my_print "Building for ${ARCH} on ${CHROOT}"

RUSH_DIR=`dirname ${0}`
BASE_DIR=/run/ramdisk

# Work directory within the temporary environment
#
# !!! WARNING !!! This is called as the argument for a `rm -rf`
WORK_DIR=${BASE_DIR}/jjat_2

# Work directory inside the chroot
CHROOT_WORK_DIR=/mnt/ramdisk/jjat_2

# Path to the local clone of the repo
LOCAL_REPO=/media/data/ubuntu/github/jjat_2
# How much RAM the temp env requires
REQ_RAM=128m

# Create a temporary environment
if [ ! -d ${BASE_DIR} ]; then
    my_print "Creating ramdisk work directory (on ${BASE_DIR})..."
    sudo mkdir -p ${BASE_DIR}
    sudo chown gfm:gfm ${BASE_DIR}
    sudo mount -t tmpfs -o size=${REQ_RAM} tmpfs ${BASE_DIR}
    check_error $? "Mount ramdisk"
fi

# Copy the local repo to the temp-env and clean it from all modifications
if [ -d ${WORK_DIR} ]; then
    # !!! DANGER !!!
    my_print "Cleaning up work dir..."
    rm -rf ${WORK_DIR}
fi
my_print "Copying local repository (${LOCAL_REPO}) into work dir..."
cp -r ${LOCAL_REPO} ${WORK_DIR}
cd ${WORK_DIR}
check_error $? "Switching to work_dir"

# This is hacky, but it gets the job done...
my_print "Cleaning up local modifications..."
git stash
while [ "$(git stash list)" != "" ]; do
    git stash drop
done

cd -

# Ensure the output directory exists
mkdir -p deploy/${ARCH}/

# Enable access to the workdir in the chroot
if [ "$(mount | grep ${CHROOT%-*})" == "" ]; then
    my_print "Binding work directory into chroot (${BASE_DIR} -> /mnt/linools/env/${CHROOT}/mnt/ramdisk)"
    if [ ! -d /mnt/linools/env/${CHROOT}/mnt/ramdisk ]; then
        sudo mkdir /mnt/linools/env/${CHROOT}/mnt/ramdisk
    fi
    sudo mount --bind ${BASE_DIR} /mnt/linools/env/${CHROOT}/mnt/ramdisk
    check_error $? "Bind work_dir into chroot"
fi

# Actually build it
my_print "Cleaning build (on chroot: ${CHROOT_WORK_DIR})..."
/mnt/linools/env/run ${CHROOT} make clean -C ${CHROOT_WORK_DIR}  RELEASE=yes
check_error $? "Clean chroot work dir"
my_print "Building (on chroot: ${CHROOT_WORK_DIR})..."
/mnt/linools/env/run ${CHROOT} make -j 7 -C ${CHROOT_WORK_DIR} RELEASE=yes
check_error $? "Deploy for chroot"

# Copy it to the output dir
my_print "Copying everything to the destination"
find ${WORK_DIR}/bin -name game -exec cp {} deploy/${ARCH}/ \;
check_error $? "Copy built bin into destination"
# Update the assets
find assets -exec ${RUSH_DIR}/update_asset {} deploy/${ARCH} \;

# Check if a win 32/64 build and add the extension
FILE_TYPE=`file deploy/${ARCH}/game`
if [ "`echo ${FILE_TYPE} | grep -o PE32+`" == "PE32+" ] || [ "`echo ${FILE_TYPE} | grep -o PE32`" == "PE32" ]; then
    mv deploy/${ARCH}/game deploy/${ARCH}/game.exe
fi

# Update the files
my_print "Updating the manual..."
rm -rf deploy/${ARCH}/manual/
cp -r ${WORK_DIR}/manual/ deploy/${ARCH}/

# Set up the manifest and launch script
rm -f deploy/${ARCH}/.itch.toml
if [ "`echo ${FILE_TYPE} | grep -o PE32+`" == "PE32+" ] || [ "`echo ${FILE_TYPE} | grep -o PE32`" == "PE32" ]; then
    sed s/BINARY/game.exe/g ${WORK_DIR}/misc/deploy/itch.manifest > deploy/${ARCH}/.itch.toml
    sed -i s/BROWSER/manual.bat/g deploy/${ARCH}/.itch.toml
    cp ${WORK_DIR}/misc/deploy/manual.bat deploy/${ARCH}/
    cp ${WORK_DIR}/misc/deploy/Single_Player_Mode.bat deploy/${ARCH}
    cp ${WORK_DIR}/misc/deploy/Synchronous_Single_Player_Mode.bat deploy/${ARCH}
    cp ${WORK_DIR}/misc/deploy/Two_Players_Mode.bat deploy/${ARCH}
else
    sed s/BINARY/launch.sh/g ${WORK_DIR}/misc/deploy/itch.manifest > deploy/${ARCH}/.itch.toml
    sed -i s/BROWSER/manual.sh/g deploy/${ARCH}/.itch.toml
    cp ${WORK_DIR}/misc/deploy/launch.sh deploy/${ARCH}/
    cp ${WORK_DIR}/misc/deploy/manual.sh deploy/${ARCH}/
    chmod 755 deploy/${ARCH}/launch.sh deploy/${ARCH}/game deploy/${ARCH}/manual.sh
fi

# Remove any ligering built file (since chroot runs as uid 0)
my_print "Final cleaning (on chroot: ${CHROOT_WORK_DIR})..."
/mnt/linools/env/run ${CHROOT} make __clean -C ${CHROOT_WORK_DIR}
check_error $? "Final clean chroot work dir"

# Push it to itch.io
my_print "Pushing the deploy..."
butler push deploy/${ARCH}/ "GFM/jjat-2:${ARCH}"

exit 0

